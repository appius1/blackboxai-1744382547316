apiVersion: apps/v1
kind: Deployment
metadata:
  name: appius-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: appius-backend
  template:
    metadata:
      labels:
        app: appius-backend
    spec:
      containers:
        - name: appius-backend
          image: appius/backend:latest
          ports:
            - containerPort: 4000
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "4000"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: appius-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: appius-secrets
                  key: redis-url
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: appius-secrets
                  key: jwt-secret
            - name: STRIPE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: appius-secrets
                  key: stripe-secret-key
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appius-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: appius-frontend
  template:
    metadata:
      labels:
        app: appius-frontend
    spec:
      containers:
        - name: appius-frontend
          image: appius/frontend:latest
          ports:
            - containerPort: 3000
          env:
            - name: NODE_ENV
              value: "production"
            - name: NEXT_PUBLIC_API_URL
              value: "https://api.appius.com"
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appius-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appius-redis
  template:
    metadata:
      labels:
        app: appius-redis
    spec:
      containers:
        - name: redis
          image: redis:6-alpine
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: appius-backend
spec:
  selector:
    app: appius-backend
  ports:
    - port: 80
      targetPort: 4000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: appius-frontend
spec:
  selector:
    app: appius-frontend
  ports:
    - port: 80
      targetPort: 3000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: appius-redis
spec:
  selector:
    app: appius-redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: appius-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - api.appius.com
        - appius.com
      secretName: appius-tls
  rules:
    - host: api.appius.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: appius-backend
                port:
                  number: 80
    - host: appius.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: appius-frontend
                port:
                  number: 80
